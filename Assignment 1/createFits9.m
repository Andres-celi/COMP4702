function [fitresult, gof] = createFits9(x,X,XValidation, fX,fXV)
%CREATEFITS1(X,FX)
%  Create fits.
%
%  Data for 'Poly 1' fit:
%      X Input : X
%      Y Output: fX
%  Data for 'poly 2' fit:
%      X Input : X
%      Y Output: fX
%  Data for 'poly 3' fit:
%      X Input : X
%      Y Output: fX
%  Data for 'poly 4' fit:
%      X Input : X
%      Y Output: fX
%  Data for 'poly 5' fit:
%      X Input : X
%      Y Output: fX
%  Data for 'poly 6' fit:
%      X Input : X
%      Y Output: fX
%  Data for 'poly 7' fit:
%      X Input : X
%      Y Output: fX
%  Data for 'poly 8' fit:
%      X Input : X
%      Y Output: fX
%  Data for 'poly 9' fit:
%      X Input : X
%      Y Output: fX
%  Output:
%      fitresult : a cell-array of fit objects representing the fits.
%      gof : structure array with goodness-of fit info.
%
%  See also FIT, CFIT, SFIT.

%  Auto-generated by MATLAB on 29-Mar-2017 15:01:58

%% Initialization.

% Initialize arrays to store fits and goodness-of-fit.
fitresult = cell( 9, 1 );
gof = struct( 'sse', cell( 9, 1 ), ...
    'rsquare', [], 'dfe', [], 'adjrsquare', [], 'rmse', [] );

%% Fit: 'Poly 1'.
[xData, yData] = prepareCurveData( X, fX );

% Set up fittype and options.
ft = fittype( 'poly1' );

% Fit model to data.
[fitresult{1}, gof(1)] = fit( xData, yData, ft );

% Plot fit with data.
figure( 'Name', 'Poly 1' );
h = plot( fitresult{1}, xData, yData );
legend( h, 'fX vs. X', 'Poly 1', 'Location', 'NorthEast' );
% Label axes
xlabel X
ylabel fX
grid on
hold on
%% Fit: 'poly 2'.
[xData, yData] = prepareCurveData( X, fX );

% Set up fittype and options.
ft = fittype( 'poly2' );

% Fit model to data.
[fitresult{2}, gof(2)] = fit( xData, yData, ft );

% Plot fit with data.
% figure( 'Name', 'poly 2' );
h = plot( fitresult{2}, 'b' );
legend( h, 'fX vs. X', 'poly 2', 'Location', 'NorthEast' );
% Label axes
xlabel X
ylabel fX
grid on

%% Fit: 'poly 3'.
[xData, yData] = prepareCurveData( X, fX );

% Set up fittype and options.
ft = fittype( 'poly3' );

% Fit model to data.
[fitresult{3}, gof(3)] = fit( xData, yData, ft );

% Plot fit with data.
% figure( 'Name', 'poly 3' );
h = plot( fitresult{3}, 'g' );
legend( h, 'fX vs. X', 'poly 3', 'Location', 'NorthEast' );
% Label axes
xlabel X
ylabel fX
grid on

%% Fit: 'poly 4'.
[xData, yData] = prepareCurveData( X, fX );

% Set up fittype and options.
ft = fittype( 'poly4' );

% Fit model to data.
[fitresult{4}, gof(4)] = fit( xData, yData, ft );

% Plot fit with data.
% figure( 'Name', 'poly 4' );
h = plot( fitresult{4}, 'c' );
% legend( h, 'fX vs. X', 'poly 4', 'Location', 'NorthEast' );
% Label axes
xlabel X
ylabel fX
grid on

%% Fit: 'poly 5'.
[xData, yData] = prepareCurveData( X, fX );

% Set up fittype and options.
ft = fittype( 'poly5' );

% Fit model to data.
[fitresult{5}, gof(5)] = fit( xData, yData, ft );

% Plot fit with data.
% figure( 'Name', 'poly 5' );
h = plot( fitresult{5}, 'y' );
% legend( h, 'fX vs. X', 'poly 5', 'Location', 'NorthEast' );
% Label axes
xlabel X
ylabel fX
grid on

%% Fit: 'poly 6'.
[xData, yData] = prepareCurveData( X, fX );

% Set up fittype and options.
ft = fittype( 'poly6' );

% Fit model to data.
[fitresult{6}, gof(6)] = fit( xData, yData, ft );

% Plot fit with data.
% figure( 'Name', 'poly 6' );
h = plot( fitresult{6});
% legend( h, 'fX vs. X', 'poly 6', 'Location', 'NorthEast' );
% Label axes
xlabel X
ylabel fX
grid on

%% Fit: 'poly 7'.
[xData, yData] = prepareCurveData( X, fX );

% Set up fittype and options.
ft = fittype( 'poly7' );

% Fit model to data.
[fitresult{7}, gof(7)] = fit( xData, yData, ft );

% Plot fit with data.
% figure( 'Name', 'poly 7' );
h = plot( fitresult{7});
% legend( h, 'fX vs. X', 'poly 7', 'Location', 'NorthEast' );
% Label axes
xlabel X
ylabel fX
grid on

%% Fit: 'poly 8'.
[xData, yData] = prepareCurveData( X, fX );

% Set up fittype and options.
ft = fittype( 'poly8' );

% Fit model to data.
[fitresult{8}, gof(8)] = fit( xData, yData, ft );

% Plot fit with data.
% figure( 'Name', 'poly 8' );
h = plot( fitresult{8},'k' );
% legend( h, 'fX vs. X', 'poly 8', 'Location', 'NorthEast' );
% Label axes
xlabel X
ylabel fX
grid on

%% Fit: 'poly 9'.
[xData, yData] = prepareCurveData( X, fX );

% Set up fittype and options.
ft = fittype( 'poly9' );

% Fit model to data.
[fitresult{9}, gof(9)] = fit( xData, yData, ft,'Normalize','on');

% Plot fit with data.
% figure( 'Name', 'poly 9' );
h = plot( fitresult{9});
legend( 'fX vs. X','poly 1','poly 2','poly 3','poly4',...
        'poly 5','poly 6','poly 7','poly 8','poly 9' );
% Label axes
xlabel X
ylabel fX
grid on

%% recover polynomes
PolynomesDegree=[1 2 3 4 5 6 7 8 9];
eq1 = fitresult2equation(fitresult{1});
eq2 = fitresult2equation(fitresult{2});
eq3 = fitresult2equation(fitresult{3});
eq4 = fitresult2equation(fitresult{4});
eq5 = fitresult2equation(fitresult{5});
eq6 = fitresult2equation(fitresult{6});
eq7 = fitresult2equation(fitresult{7});
eq8 = fitresult2equation(fitresult{8});
eq9 = fitresult2equation(fitresult{9});

poly1 = double(subs(eq1,XValidation));
poly2 = double(subs(eq2,XValidation));
poly3 = double(subs(eq3,XValidation));
poly4 = double(subs(eq4,XValidation));
poly5 = double(subs(eq5,XValidation));
poly6 = double(subs(eq6,XValidation));
poly7 = double(subs(eq7,XValidation));
poly8 = double(subs(eq8,XValidation));
poly9 = double(subs(eq9,XValidation));

mse1 = immse(fXV,poly1)
mse2 = immse(fXV,poly2)
mse3 = immse(fXV,poly3)
mse4 = immse(fXV,poly4)
mse5 = immse(fXV,poly5)
mse6 = immse(fXV,poly6)
mse7 = immse(fXV,poly7)
mse8 = immse(fXV,poly8)
mse9 = immse(fXV,poly9)

mseVali = [mse1 mse2 mse3 mse4 mse5 mse6 mse7 mse8 mse9];
   

%% plot of various sse vs polynome degree
gof1=gof(1).sse;
gof2=gof(2).sse;
gof3=gof(3).sse;
gof4=gof(4).sse;
gof5=gof(5).sse;
gof6=gof(6).sse;
gof7=gof(7).sse;
gof8=gof(8).sse;
gof9=gof(9).sse;
MSEs = [gof1/length(X),gof2/length(X),gof3/length(X),gof4/length(X),...
        gof5/length(X),gof6/length(X),gof7/length(X),gof8/length(X),...
        gof9/length(X)];


figure( 'Name', 'validation/training mse vs polynome degree')
hold on
p = plot(PolynomesDegree,MSEs,'Marker','*');
pv = plot(PolynomesDegree,mseVali, 'Marker' , '^');
xlim ([1 9]);
legend('training','validation')
grid on


